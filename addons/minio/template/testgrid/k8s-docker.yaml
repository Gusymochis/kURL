# basic test
- name: fresh minio install
  installerSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: default
      namespace: openebs
      version: "3.2.x"
    docker:
      version: "latest"
    minio:
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    function object_store_bucket_exists() {
        local bucket=$1
        local acl="x-amz-acl:private"
        local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
        local string="HEAD\n\n\n${d}\n${acl}\n/$bucket"
        local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
        curl -fsSL -I \
            --globoff \
            --noproxy "*" \
            -H "Host: $OBJECT_STORE_CLUSTER_IP" \
            -H "Date: $d" \
            -H "$acl" \
            -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
            "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function _object_store_create_bucket() {
      local bucket=$1
      local acl="x-amz-acl:private"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n\n${d}\n${acl}\n/$bucket"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
      curl -fsSL -X PUT  \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "$acl" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function object_store_create_bucket() {
        if object_store_bucket_exists "$1" ; then
            return 0
        fi
        if ! _object_store_create_bucket "$1" ; then
            echo "failed to create bucket $1"
            return 1
        fi
        echo "object store bucket $1 created"
    }
    
    function object_store_write_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X PUT -T "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    function object_store_get_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="GET\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X GET -o "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')
    
    echo "creating 'rwtest' bucket"
    object_store_create_bucket rwtest
    
    echo "writing testfile.txt to rwtest bucket"
    echo "Hello, World!" > testfile.txt
    date >> testfile.txt
    object_store_write_object rwtest testfile.txt
    
    echo "retrieving testfile.txt from rwtest bucket"
    mv testfile.txt testfile.bak
    object_store_get_object rwtest testfile.txt
    
    echo "comparing retrieved testfile.txt with local copy"
    diff testfile.txt testfile.bak
    echo "file was successfully stored and retrieved"
    cat testfile.txt testfile.bak

# migration from rook-ceph object store to minio
- name: migrate from rook-ceph object store to minio
  installerSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    containerd:
      version: "latest"
    kotsadm:
      version: "latest"
    rook:
      version: "latest"
  upgradeSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    containerd:
      version: "latest"
    kotsadm:
      version: "latest"
    minio:
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    function object_store_bucket_exists() {
        local bucket=$1
        local acl="x-amz-acl:private"
        local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
        local string="HEAD\n\n\n${d}\n${acl}\n/$bucket"
        local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
        curl -fsSL -I \
            --globoff \
            --noproxy "*" \
            -H "Host: $OBJECT_STORE_CLUSTER_IP" \
            -H "Date: $d" \
            -H "$acl" \
            -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
            "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function _object_store_create_bucket() {
      local bucket=$1
      local acl="x-amz-acl:private"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n\n${d}\n${acl}\n/$bucket"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
      curl -fsSL -X PUT  \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "$acl" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function object_store_create_bucket() {
        if object_store_bucket_exists "$1" ; then
            return 0
        fi
        if ! _object_store_create_bucket "$1" ; then
            echo "failed to create bucket $1"
            return 1
        fi
        echo "object store bucket $1 created"
    }
    
    function object_store_write_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X PUT -T "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    function object_store_get_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="GET\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X GET -o "${file}" \
      --globoff \
      --noproxy "*" \
      -H "Host: $OBJECT_STORE_CLUSTER_IP" \
      -H "Date: $d" \
      -H "Content-Type: ${contentType}" \
      -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
      "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get rook-ceph access info
    
    OBJECT_STORE_ACCESS_KEY=$(kubectl -n rook-ceph get secret rook-ceph-object-user-rook-ceph-store-kurl -o yaml | grep AccessKey | head -1 | awk '{print $2}' | base64 --decode)
    OBJECT_STORE_SECRET_KEY=$(kubectl -n rook-ceph get secret rook-ceph-object-user-rook-ceph-store-kurl -o yaml | grep SecretKey | head -1 | awk '{print $2}' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n rook-ceph get service rook-ceph-rgw-rook-ceph-store | tail -n1 | awk '{ print $3}')    
    
    echo "creating 'rwtest' bucket"
    object_store_create_bucket rwtest

    echo "writing testfile.txt to rwtest bucket"
    echo "Hello, World!" > testfile.txt
    date >> testfile.txt
    object_store_write_object rwtest testfile.txt
    
    echo "retrieving testfile.txt from rwtest bucket"
    mv testfile.txt testfile.bak
    object_store_get_object rwtest testfile.txt

    echo "comparing retrieved testfile.txt with local copy"
    diff testfile.txt testfile.bak
    echo "file was successfully stored and retrieved"
    cat testfile.txt testfile.bak
    
    echo "removing testfile.bak for post-upgrade test"
    rm testfile.bak
  postUpgradeScript: |
    function object_store_get_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="GET\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X GET -o "${file}" \
      --globoff \
      --noproxy "*" \
      -H "Host: $OBJECT_STORE_CLUSTER_IP" \
      -H "Date: $d" \
      -H "Content-Type: ${contentType}" \
      -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
      "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')
    
    # ensure the test file is still present
    cat testfile.txt
    
    echo "retrieving testfile.txt from rwtest bucket"
    mv testfile.txt testfile.bak
    object_store_get_object rwtest testfile.txt
    
    echo "comparing retrieved testfile.txt with local copy"
    diff testfile.txt testfile.bak
    echo "file was successfully stored and retrieved"
    cat testfile.txt testfile.bak


# installation with specified PVC size
- name: install with 20Gi volume
  installerSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    longhorn:
      version: "latest"
    containerd:
      version: "latest"
    minio:
      version: "__testver__"
      claimSize: "20Gi"
      s3Override: "__testdist__"
  postInstallScript: |
    function object_store_bucket_exists() {
        local bucket=$1
        local acl="x-amz-acl:private"
        local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
        local string="HEAD\n\n\n${d}\n${acl}\n/$bucket"
        local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
        curl -fsSL -I \
            --globoff \
            --noproxy "*" \
            -H "Host: $OBJECT_STORE_CLUSTER_IP" \
            -H "Date: $d" \
            -H "$acl" \
            -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
            "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function _object_store_create_bucket() {
      local bucket=$1
      local acl="x-amz-acl:private"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n\n${d}\n${acl}\n/$bucket"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
      curl -fsSL -X PUT  \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "$acl" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function object_store_create_bucket() {
        if object_store_bucket_exists "$1" ; then
            return 0
        fi
        if ! _object_store_create_bucket "$1" ; then
            echo "failed to create bucket $1"
            return 1
        fi
        echo "object store bucket $1 created"
    }
    
    function object_store_write_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X PUT -T "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    function object_store_get_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="GET\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X GET -o "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')
    
    echo "creating 'rwtest' bucket"
    object_store_create_bucket rwtest
    
    echo "writing testfile.txt to rwtest bucket"
    echo "Hello, World!" > testfile.txt
    date >> testfile.txt
    object_store_write_object rwtest testfile.txt
    
    echo "retrieving testfile.txt from rwtest bucket"
    mv testfile.txt testfile.bak
    object_store_get_object rwtest testfile.txt
    
    echo "comparing retrieved testfile.txt with local copy"
    diff testfile.txt testfile.bak
    echo "file was successfully stored and retrieved"
    cat testfile.txt testfile.bak

# installation with hostPath
- name: install using /opt/minio hostpath
  installerSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    containerd:
      version: "latest"
    minio:
      version: "__testver__"
      hostPath: "/opt/minio"
      s3Override: "__testdist__"
  postInstallScript: |
    function object_store_bucket_exists() {
        local bucket=$1
        local acl="x-amz-acl:private"
        local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
        local string="HEAD\n\n\n${d}\n${acl}\n/$bucket"
        local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
        curl -fsSL -I \
            --globoff \
            --noproxy "*" \
            -H "Host: $OBJECT_STORE_CLUSTER_IP" \
            -H "Date: $d" \
            -H "$acl" \
            -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
            "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function _object_store_create_bucket() {
      local bucket=$1
      local acl="x-amz-acl:private"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n\n${d}\n${acl}\n/$bucket"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
      curl -fsSL -X PUT  \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "$acl" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function object_store_create_bucket() {
        if object_store_bucket_exists "$1" ; then
            return 0
        fi
        if ! _object_store_create_bucket "$1" ; then
            echo "failed to create bucket $1"
            return 1
        fi
        echo "object store bucket $1 created"
    }
    
    function object_store_write_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X PUT -T "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    function object_store_get_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="GET\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X GET -o "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')
    
    echo "creating 'rwtest' bucket"
    object_store_create_bucket rwtest
    
    echo "writing testfile.txt to rwtest bucket"
    echo "Hello, World!" > testfile.txt
    date >> testfile.txt
    object_store_write_object rwtest testfile.txt
    
    echo "retrieving testfile.txt from rwtest bucket"
    mv testfile.txt testfile.bak
    object_store_get_object rwtest testfile.txt
    
    echo "comparing retrieved testfile.txt with local copy"
    diff testfile.txt testfile.bak
    echo "file was successfully stored and retrieved"
    cat testfile.txt testfile.bak

# upgrade that changes PVC size
- name: upgrade minio from latest while increasing PVC claim size
  installerSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    longhorn:
      version: "latest"
    containerd:
      version: "latest"
    minio:
      version: "latest"
  upgradeSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    longhorn:
      version: "latest"
    containerd:
      version: "latest"
    minio:
      version: "__testver__"
      claimSize: "20Gi"
      s3Override: "__testdist__"
  postInstallScript: |
    function object_store_bucket_exists() {
        local bucket=$1
        local acl="x-amz-acl:private"
        local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
        local string="HEAD\n\n\n${d}\n${acl}\n/$bucket"
        local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
        curl -fsSL -I \
            --globoff \
            --noproxy "*" \
            -H "Host: $OBJECT_STORE_CLUSTER_IP" \
            -H "Date: $d" \
            -H "$acl" \
            -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
            "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function _object_store_create_bucket() {
      local bucket=$1
      local acl="x-amz-acl:private"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n\n${d}\n${acl}\n/$bucket"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
      curl -fsSL -X PUT  \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "$acl" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function object_store_create_bucket() {
        if object_store_bucket_exists "$1" ; then
            return 0
        fi
        if ! _object_store_create_bucket "$1" ; then
            echo "failed to create bucket $1"
            return 1
        fi
        echo "object store bucket $1 created"
    }
    
    function object_store_write_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X PUT -T "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')

    echo "creating 'rwtest' bucket"
    object_store_create_bucket rwtest

    echo "writing testfile.txt to rwtest bucket"
    echo "Hello, World!" > testfile.txt
    date >> testfile.txt
    object_store_write_object rwtest testfile.txt
  postUpgradeScript: |
    function object_store_get_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="GET\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X GET -o "${file}" \
      --globoff \
      --noproxy "*" \
      -H "Host: $OBJECT_STORE_CLUSTER_IP" \
      -H "Date: $d" \
      -H "Content-Type: ${contentType}" \
      -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
      "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')
    
    # ensure the test file is still present
    cat testfile.txt
    
    echo "retrieving testfile.txt from rwtest bucket"
    mv testfile.txt testfile.bak
    object_store_get_object rwtest testfile.txt
    
    echo "comparing retrieved testfile.txt with local copy"
    diff testfile.txt testfile.bak
    echo "file was successfully stored and retrieved"
    cat testfile.txt testfile.bak

# upgrade from 2020-01-25T02-50-51Z
- name: upgrade minio from 2020-01-25T02-50-51Z
  installerSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    longhorn:
      version: "latest"
    containerd:
      version: "latest"
    minio:
      version: "2020-01-25T02-50-51Z"
  upgradeSpec:
    kubernetes:
      version: "latest"
    weave:
      version: "latest"
    longhorn:
      version: "latest"
    containerd:
      version: "latest"
    minio:
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    function object_store_bucket_exists() {
        local bucket=$1
        local acl="x-amz-acl:private"
        local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
        local string="HEAD\n\n\n${d}\n${acl}\n/$bucket"
        local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
        curl -fsSL -I \
            --globoff \
            --noproxy "*" \
            -H "Host: $OBJECT_STORE_CLUSTER_IP" \
            -H "Date: $d" \
            -H "$acl" \
            -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
            "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function _object_store_create_bucket() {
      local bucket=$1
      local acl="x-amz-acl:private"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n\n${d}\n${acl}\n/$bucket"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
      curl -fsSL -X PUT  \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "$acl" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP/$bucket"
    }
    
    function object_store_create_bucket() {
        if object_store_bucket_exists "$1" ; then
            return 0
        fi
        if ! _object_store_create_bucket "$1" ; then
            echo "failed to create bucket $1"
            return 1
        fi
        echo "object store bucket $1 created"
    }
    
    function object_store_write_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="PUT\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X PUT -T "${file}" \
        --globoff \
        --noproxy "*" \
        -H "Host: $OBJECT_STORE_CLUSTER_IP" \
        -H "Date: $d" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
        "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')

    echo "creating 'rwtest' bucket"
    object_store_create_bucket rwtest

    echo "writing testfile.txt to rwtest bucket"
    echo "Hello, World!" > testfile.txt
    date >> testfile.txt
    object_store_write_object rwtest testfile.txt
  postUpgradeScript: |
    function object_store_get_object() {
      local bucket=$1
      local file=$2
      local resource="/${bucket}/${file}"
      local contentType="application/x-compressed-tar"
      local d=$(LC_TIME="en_US.UTF-8" TZ="UTC" date +"%a, %d %b %Y %T %z")
      local string="GET\n\n${contentType}\n${d}\n${resource}"
      local sig=$(echo -en "${string}" | openssl sha1 -hmac "${OBJECT_STORE_SECRET_KEY}" -binary | base64)
    
      curl -X GET -o "${file}" \
      --globoff \
      --noproxy "*" \
      -H "Host: $OBJECT_STORE_CLUSTER_IP" \
      -H "Date: $d" \
      -H "Content-Type: ${contentType}" \
      -H "Authorization: AWS $OBJECT_STORE_ACCESS_KEY:$sig" \
      "http://$OBJECT_STORE_CLUSTER_IP$resource"
    }
    
    # get minio access info
    export OBJECT_STORE_ACCESS_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_ACCESS_KEY }' | base64 --decode)
    export OBJECT_STORE_SECRET_KEY=$(kubectl -n minio get secret minio-credentials -ojsonpath='{ .data.MINIO_SECRET_KEY }' | base64 --decode)
    OBJECT_STORE_CLUSTER_IP=$(kubectl -n minio get service minio | tail -n1 | awk '{ print $3}')
    
    # ensure the test file is still present
    cat testfile.txt
    
    echo "retrieving testfile.txt from rwtest bucket"
    mv testfile.txt testfile.bak
    object_store_get_object rwtest testfile.txt
    
    echo "comparing retrieved testfile.txt with local copy"
    diff testfile.txt testfile.bak
    echo "file was successfully stored and retrieved"
    cat testfile.txt testfile.bak
